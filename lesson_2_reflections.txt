What happens when you initialize a repository? Why do you need to do it?

When you ran git init on a directory you create an empty .git repository.
Only files from that directory will be contained in that repository.
Git repositories strore a bunch of data about a history of the repository
since it was created. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is kind of 'waiting room'before making a commit. It is possible
to change your mind and take a file back to the working directory if you want. 

How can you use the staging area to make sure you have one commit per logical
change?

In the staging area you can compare changes you've made between working area
and staging area using `git diff` command. You can also compare changes between
staging area and repository using `git diff --staged` command.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you want to create different versions of your programm and at the same time
keep the original version up to date, branches would be very helpfull. You can 
work on your program in different direction than your master version.  

How do the diagrams help you visualize the branch structure?
Diagrams are really usefull when you try to visualise which direction the
program is going. You can see the layout of all the branches in one diagram.



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result of merging two brsanches together is one version with all the changes
made seperately in those branches. We represent them the way we do to have clear
view at the history.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
